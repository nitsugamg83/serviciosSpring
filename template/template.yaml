apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: springboot-template
  title: Spring Boot Microservice
  description: Scaffold a basic Spring Boot service
  tags:
    - java
    - springboot
spec:
  owner: user:guest
  type: service

  parameters:
    - title: Información del componente
      required:
        - componentId
        - groupId
        - artifactId
      properties:
        componentId:
          type: string
          title: Nombre del componente
          description: Nombre único del microservicio
        groupId:
          type: string
          title: GroupId del proyecto (paquete base)
        artifactId:
          type: string
          title: ArtifactId raíz (nombre del microservicio)

  steps:
    - id: fetch
      name: Descargar template
      action: fetch:template
      input:
        url: ./skeleton
        targetPath: ./
        values:
          componentId: ${{ parameters.componentId }}
          groupId: ${{ parameters.groupId }}
          artifactId: ${{ parameters.artifactId }}

    - id: replace-identifiers
      name: Reemplazar groupId y artifactId
      action: search:replace
      input:
        dir: .
        replacements:
          - search: "axity.mbtransfers"
            replaceWith: "${{ parameters.groupId }}"
          - search: "mb-transfers"
            replaceWith: "${{ parameters.artifactId }}"
          - search: "artifactId>mb-transfers-"
            replaceWith: "artifactId>${{ parameters.artifactId }}-"
          - search: "name>mb-transfers-"
            replaceWith: "name>${{ parameters.artifactId }}-"
          - search: "module>mb-transfers-"
            replaceWith: "module>${{ parameters.artifactId }}-"

    - id: publish
      name: Publicar en GitHub
      action: publish:github
      input:
        repoUrl: "github.com?repo=${{ parameters.componentId }}&owner=nitsugamg83"
        repoVisibility: public

    - id: register
      name: Registrar componente
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps.publish.output.repoContentsUrl }}
        catalogInfoPath: /catalog-info.yaml

  output:
    links:
      - title: Ver repositorio en GitHub
        url: ${{ steps.publish.output.remoteUrl }}
